Input: nums = [1,2,3,4,5,6,7], k = 3
Output: [5,6,7,1,2,3,4]
Explanation:
rotate 1 steps to the right: [7,1,2,3,4,5,6]
rotate 2 steps to the right: [6,7,1,2,3,4,5]
rotate 3 steps to the right: [5,6,7,1,2,3,4]

Input: nums = [-1,-100,3,99], k = 2
Output: [3,99,-1,-100]
Explanation: 
rotate 1 steps to the right: [99,-1,-100,3]
rotate 2 steps to the right: [3,99,-1,-100]


ALGO:-
1. Reverse elements till index k.
   Array becomes 4 3 2 1 5 6 7
2. Reverse elements after index k.
   Array becomes 4 3 2 1 7 6 5
3. Reverse the whole array.
   Array becomes 5 6 7 1 2 3 4


CODE:-
class Solution {
public:
    void rotate(vector<int>& nums, int k) {
        k = k%nums.size();
        int i=0;
        int j=nums.size()-1-k;
        while(i<j){
            swap(nums[i],nums[j]);
            i++;
            j--;
        }
        i = nums.size()-k;
        j = nums.size()-1;
        while(i<j){
            swap(nums[i],nums[j]);
            i++;
            j--;
        }
        i = 0;
        j = nums.size()-1;
        while(i<j){
            swap(nums[i],nums[j]);
            i++;
            j--;
        }
    }
};


ANOTHER APPROACH:-


class Solution {
public:
    void rotate(vector<int>& nums, int k) {
        int n = nums.size();
        vector<int> temp(n);
        for(int i=0; i<n; i++){
            temp[(i+k)%n] = nums[i];
        }
        nums = temp;
    }
};
